/*
* Find query string when creating an URI
*
* query string parameter from URI constructor, https://docs.oracle.com/javase/7/docs/api/java/net/URI.html
*
* set query or URL parameter methods
*
* String concatenation
*  1) binary operator "+", E.g. "http://www.someone.com?" + "key=" + param;
*  2) String concat method, E.g. "http://www.some.com?".concat(queryString)
*  3) string format, E.g. String.format("%s ?key=%s", u, param);
*  4) StringBuilder or StringBuffer append method, E.g. StringBuilder.append("?").append("key=").append(param);
*/
CxList methods = Find_Methods();
CxList unknownRefs = Find_UnknownReference();
CxList stringReference = unknownRefs.FindByType("String");
CxList objectCreate = Find_ObjectCreations();
CxList stringLiterals = Find_Strings();
CxList declarators = Find_Declarators();
CxList customAttribute = Find_CustomAttribute();
CxList propertiesFile = Find_Properties_Files();
CxList paramDecls = Find_ParamDecl();

CxList uriCreate = objectCreate.FindByShortName("URI");
CxList uriQueryParam = All.NewCxList();
uriQueryParam.Add(stringReference.GetParameters(uriCreate, 5));
uriQueryParam.Add(stringReference.GetParameters(uriCreate, 3));

CxList uriQueryMethods = All.FindByMemberAccesses(new string[]{
	// https://www.javadoc.io/doc/org.apache.httpcomponents/httpclient/4.2.4/org/apache/http/client/utils/URIBuilder.html
	"URIBuilder.setParameter",
	"URIBuilder.setQuery",
	//https://docs.oracle.com/javaee/7/api/javax/ws/rs/core/UriBuilder.html
	"UriBuilder.queryParam",
	"UriBuilder.replaceQuery",
	"UriBuilder.replaceQueryParam",
	//
	"Builder.addQueryParameter",
	});

stringLiterals.Add(All.FindAllReferences(Find_Strings().GetAssignee()));


// 1. find possible url string
CxList possibleUrlString = All.NewCxList();
possibleUrlString.Add(stringLiterals.FindByShortNames(new List<string> {"*?*", "*=*", "*&*"}));
possibleUrlString.Add(stringLiterals.FindByRegex(@"https?://\w+(\.\w+)*(:\d+)?/"));

// 2. find references of url string declarator (variable or final field)
CxList urlDeclarations = possibleUrlString.GetAssignee();
CxList urlReferences = All.NewCxList();
urlReferences.Add(possibleUrlString);
int i = 5;
while ( i-- > 0) {
	CxList binaryAddString = urlReferences.GetAncOfType(typeof(BinaryExpr));
	CxList variableDeclStatements = binaryAddString.GetAncOfType(typeof(VariableDeclStmt));
	urlDeclarations.Add(declarators.GetByAncs(variableDeclStatements));
	urlReferences.Add(All.FindAllReferences(urlDeclarations));
}

// 3. find references of url string field
// org.springframework.beans.factory.annotation.Value;
CxList annotations = customAttribute.FindByCustomAttribute("Value");
CxList goodAnnotations = All.NewCxList();

foreach (CxList annotation in annotations) {
	CxList annotationString = stringLiterals.GetByAncs(annotation);
	StringLiteral text = annotationString.TryGetCSharpGraph<StringLiteral>();
	String shortName = text.ShortName;
	String annoStrValue = "";
	if (shortName.Contains("${")) {
		goodAnnotations.Add(annotation);
		// the string is a properties from properties file
		/*
		string pattern = @"\${(\w+(\.\w+)*)}";
		foreach(Match m in new System.Text.RegularExpressions.Regex(pattern).Matches(shortName)){
		shortName = m.Groups[1].Value;
		break;
		}
		//cxLog.WriteDebugMessage("shortName: " + shortName);
		String[] members = shortName.Split('.');
		int arrayLength = members.Length;
		// the property in a properties file
		CxList propertiesMember = propertiesFile.FindByMemberAccess("*" + shortName);

		if (propertiesMember.Count > 0) {
		CxList propertyValue = propertiesMember.GetAssigner();
		StringLiteral propertyValueStr = propertyValue.TryGetCSharpGraph<StringLiteral>();
		annoStrValue = propertyValueStr.ShortName;
		}
		*/
	} else {
		// the string is a place holder value
		annoStrValue = shortName;
	}
	//cxLog.WriteDebugMessage("annoStrValue: " + annoStrValue);

	// if annoStrValue has fixed FQDN (hostname and port), keep it
	MatchCollection matchCol = Regex.Matches(annoStrValue, @"https?://\w+(\.\w+)*(:\d+)?/");
	if (matchCol.Count > 0) {
		goodAnnotations.Add(annotation);
	}

	// if annoStrValue has ? = & characters, keep it
	MatchCollection matchColl = Regex.Matches(annoStrValue, @"[\?=&]");
	if (matchColl.Count > 0) {
		goodAnnotations.Add(annotation);
	}

}

CxList fieldOrParamDecls = goodAnnotations.GetFathers();
CxList fieldOrParamReferences = All.FindAllReferences(fieldOrParamDecls);
CxList paramDeclaration = paramDecls * paramDecls.InfluencedBy(fieldOrParamReferences);
CxList paramReferences = All.FindAllReferences(paramDeclaration);

CxList possibleUrlStringReferences = All.NewCxList();
possibleUrlStringReferences.Add(urlReferences);
possibleUrlStringReferences.Add(fieldOrParamReferences);
possibleUrlStringReferences.Add(paramReferences);

result = uriQueryParam;
result.Add(All.GetParameters(uriQueryMethods));
result.Add(Find_String_Add_Sanitizer_with_Specific_Prefix(possibleUrlStringReferences));
